From f521618d334abc0fedf6edd1753e353e91b9b547 Mon Sep 17 00:00:00 2001
From: Kingdon <yebyen@gmail.com>
Date: Tue, 12 May 2015 18:28:30 -0400
Subject: [PATCH 2/2] armhf clean build with scrypt

---
 Makefile                             |   6 +-
 i/n/a.h                              |   2 +-
 n/m.c                                |   9 -
 outside/scrypt/crypto_scrypt-nosse.c | 411 +++++++++++++++++------------------
 outside/scrypt/crypto_scrypt.h       |   3 +-
 5 files changed, 201 insertions(+), 230 deletions(-)

diff --git a/Makefile b/Makefile
index c94d85f..70afca3 100644
--- a/Makefile
+++ b/Makefile
@@ -35,7 +35,7 @@ BIN=bin
 
 LIB=$(shell pwd)/urb
 
-RM=rm -f
+RM=rm -rf
 CC=gcc
 CXX=g++
 CXXFLAGS=$(CFLAGS)
@@ -65,7 +65,7 @@ MDEFINES=-DU3_OS_$(OS) -DU3_OS_ENDIAN_$(ENDIAN) -D U3_LIB=\"$(LIB)\"
 
 # NOTFORCHECKIN - restore -O3
 # 	-DGHETTO
-CFLAGS= $(COSFLAGS) -O3 -msse3 -ffast-math \
+CFLAGS= $(COSFLAGS) -O3 -ffast-math \
 	-funsigned-char \
 	-I/usr/local/include \
 	-I/opt/local/include \
@@ -434,6 +434,7 @@ debinstall:
 
 clean: 
 	$(RM) $(VERE_OFILES) $(BIN)/vere vere.pkg $(VERE_DFILES)
+	$(RM) debian/files debian/urbit*
 
 distclean: clean $(LIBUV_MAKEFILE)
 	$(MAKE) -C outside/libuv_0.11 distclean
@@ -441,5 +442,6 @@ distclean: clean $(LIBUV_MAKEFILE)
 	$(MAKE) -C outside/ed25519 clean
 	$(MAKE) -C outside/anachronism clean
 	$(MAKE) -C outside/scrypt clean
+	$(RM) debian/files debian/urbit*
 
 .PHONY: clean debbuild debinstalldistclean etags osxpackage tags
diff --git a/i/n/a.h b/i/n/a.h
index d92e28a..fcc6466 100644
--- a/i/n/a.h
+++ b/i/n/a.h
@@ -19,7 +19,7 @@
   **/
     /* u3a_bits: number of bits in word-addressed pointer.  29 == 2GB.
     */
-#     define u3a_bits  29
+#     define u3a_bits  28
 
     /* u3a_page: number of bits in word-addressed page.  12 == 16Kbyte page.
     */
diff --git a/n/m.c b/n/m.c
index d9db52f..1dfc2f8 100644
--- a/n/m.c
+++ b/n/m.c
@@ -6,8 +6,6 @@
 #include <sys/stat.h>
 #include <ctype.h>
 #include <sigsegv.h>
-#include <pmmintrin.h>
-#include <xmmintrin.h>
 
 #include "all.h"
 
@@ -1345,13 +1343,6 @@ _cm_limits(void)
   struct rlimit rlm;
   c3_i          ret_i;
 
-  /* Set compatible floating-point modes.
-  */
-  {
-    _MM_SET_FLUSH_ZERO_MODE(_MM_FLUSH_ZERO_ON);
-    _MM_SET_DENORMALS_ZERO_MODE(_MM_DENORMALS_ZERO_ON);
-  }
-
   /* Moar stack.
   */
   {
diff --git a/outside/scrypt/crypto_scrypt-nosse.c b/outside/scrypt/crypto_scrypt-nosse.c
index d7b33c0..cfeff7e 100644
--- a/outside/scrypt/crypto_scrypt-nosse.c
+++ b/outside/scrypt/crypto_scrypt-nosse.c
@@ -29,7 +29,6 @@
 #include <sys/types.h>
 #include <sys/mman.h>
 
-#include <emmintrin.h>
 #include <errno.h>
 #include <stdint.h>
 #include <stdlib.h>
@@ -40,28 +39,34 @@
 
 #include "crypto_scrypt.h"
 
+static void blkcpy(void *, void *, size_t);
+static void blkxor(void *, void *, size_t);
+static void salsa20_8(uint32_t[16]);
+static void blockmix_salsa8(uint32_t *, uint32_t *, uint32_t *, size_t);
+static uint64_t integerify(void *, size_t);
+
 static void
 blkcpy(void * dest, void * src, size_t len)
 {
-	__m128i * D = dest;
-	__m128i * S = src;
-	size_t L = len / 16;
-	size_t i;
+  size_t * D = dest;
+  size_t * S = src;
+  size_t L = len / sizeof(size_t);
+  size_t i;
 
-	for (i = 0; i < L; i++)
-		D[i] = S[i];
+  for (i = 0; i < L; i++)
+    D[i] = S[i];
 }
 
 static void
 blkxor(void * dest, void * src, size_t len)
 {
-	__m128i * D = dest;
-	__m128i * S = src;
-	size_t L = len / 16;
-	size_t i;
+  size_t * D = dest;
+  size_t * S = src;
+  size_t L = len / sizeof(size_t);
+  size_t i;
 
-	for (i = 0; i < L; i++)
-		D[i] = _mm_xor_si128(D[i], S[i]);
+  for (i = 0; i < L; i++)
+    D[i] ^= S[i];
 }
 
 /**
@@ -69,61 +74,43 @@ blkxor(void * dest, void * src, size_t len)
  * Apply the salsa20/8 core to the provided block.
  */
 static void
-salsa20_8(__m128i B[4])
+salsa20_8(uint32_t B[16])
 {
-	__m128i X0, X1, X2, X3;
-	__m128i T;
-	size_t i;
-
-	X0 = B[0];
-	X1 = B[1];
-	X2 = B[2];
-	X3 = B[3];
-
-	for (i = 0; i < 8; i += 2) {
-		/* Operate on "columns". */
-		T = _mm_add_epi32(X0, X3);
-		X1 = _mm_xor_si128(X1, _mm_slli_epi32(T, 7));
-		X1 = _mm_xor_si128(X1, _mm_srli_epi32(T, 25));
-		T = _mm_add_epi32(X1, X0);
-		X2 = _mm_xor_si128(X2, _mm_slli_epi32(T, 9));
-		X2 = _mm_xor_si128(X2, _mm_srli_epi32(T, 23));
-		T = _mm_add_epi32(X2, X1);
-		X3 = _mm_xor_si128(X3, _mm_slli_epi32(T, 13));
-		X3 = _mm_xor_si128(X3, _mm_srli_epi32(T, 19));
-		T = _mm_add_epi32(X3, X2);
-		X0 = _mm_xor_si128(X0, _mm_slli_epi32(T, 18));
-		X0 = _mm_xor_si128(X0, _mm_srli_epi32(T, 14));
-
-		/* Rearrange data. */
-		X1 = _mm_shuffle_epi32(X1, 0x93);
-		X2 = _mm_shuffle_epi32(X2, 0x4E);
-		X3 = _mm_shuffle_epi32(X3, 0x39);
-
-		/* Operate on "rows". */
-		T = _mm_add_epi32(X0, X1);
-		X3 = _mm_xor_si128(X3, _mm_slli_epi32(T, 7));
-		X3 = _mm_xor_si128(X3, _mm_srli_epi32(T, 25));
-		T = _mm_add_epi32(X3, X0);
-		X2 = _mm_xor_si128(X2, _mm_slli_epi32(T, 9));
-		X2 = _mm_xor_si128(X2, _mm_srli_epi32(T, 23));
-		T = _mm_add_epi32(X2, X3);
-		X1 = _mm_xor_si128(X1, _mm_slli_epi32(T, 13));
-		X1 = _mm_xor_si128(X1, _mm_srli_epi32(T, 19));
-		T = _mm_add_epi32(X1, X2);
-		X0 = _mm_xor_si128(X0, _mm_slli_epi32(T, 18));
-		X0 = _mm_xor_si128(X0, _mm_srli_epi32(T, 14));
-
-		/* Rearrange data. */
-		X1 = _mm_shuffle_epi32(X1, 0x39);
-		X2 = _mm_shuffle_epi32(X2, 0x4E);
-		X3 = _mm_shuffle_epi32(X3, 0x93);
-	}
-
-	B[0] = _mm_add_epi32(B[0], X0);
-	B[1] = _mm_add_epi32(B[1], X1);
-	B[2] = _mm_add_epi32(B[2], X2);
-	B[3] = _mm_add_epi32(B[3], X3);
+  uint32_t x[16];
+  size_t i;
+
+  blkcpy(x, B, 64);
+  for (i = 0; i < 8; i += 2) {
+#define R(a,b) (((a) << (b)) | ((a) >> (32 - (b))))
+    /* Operate on columns. */
+    x[ 4] ^= R(x[ 0]+x[12], 7);  x[ 8] ^= R(x[ 4]+x[ 0], 9);
+    x[12] ^= R(x[ 8]+x[ 4],13);  x[ 0] ^= R(x[12]+x[ 8],18);
+
+    x[ 9] ^= R(x[ 5]+x[ 1], 7);  x[13] ^= R(x[ 9]+x[ 5], 9);
+    x[ 1] ^= R(x[13]+x[ 9],13);  x[ 5] ^= R(x[ 1]+x[13],18);
+
+    x[14] ^= R(x[10]+x[ 6], 7);  x[ 2] ^= R(x[14]+x[10], 9);
+    x[ 6] ^= R(x[ 2]+x[14],13);  x[10] ^= R(x[ 6]+x[ 2],18);
+
+    x[ 3] ^= R(x[15]+x[11], 7);  x[ 7] ^= R(x[ 3]+x[15], 9);
+    x[11] ^= R(x[ 7]+x[ 3],13);  x[15] ^= R(x[11]+x[ 7],18);
+
+    /* Operate on rows. */
+    x[ 1] ^= R(x[ 0]+x[ 3], 7);  x[ 2] ^= R(x[ 1]+x[ 0], 9);
+    x[ 3] ^= R(x[ 2]+x[ 1],13);  x[ 0] ^= R(x[ 3]+x[ 2],18);
+
+    x[ 6] ^= R(x[ 5]+x[ 4], 7);  x[ 7] ^= R(x[ 6]+x[ 5], 9);
+    x[ 4] ^= R(x[ 7]+x[ 6],13);  x[ 5] ^= R(x[ 4]+x[ 7],18);
+
+    x[11] ^= R(x[10]+x[ 9], 7);  x[ 8] ^= R(x[11]+x[10], 9);
+    x[ 9] ^= R(x[ 8]+x[11],13);  x[10] ^= R(x[ 9]+x[ 8],18);
+
+    x[12] ^= R(x[15]+x[14], 7);  x[13] ^= R(x[12]+x[15], 9);
+    x[14] ^= R(x[13]+x[12],13);  x[15] ^= R(x[14]+x[13],18);
+#undef R
+  }
+  for (i = 0; i < 16; i++)
+    B[i] += x[i];
 }
 
 /**
@@ -133,31 +120,31 @@ salsa20_8(__m128i B[4])
  * temporary space X must be 64 bytes.
  */
 static void
-blockmix_salsa8(__m128i * Bin, __m128i * Bout, __m128i * X, size_t r)
+blockmix_salsa8(uint32_t * Bin, uint32_t * Bout, uint32_t * X, size_t r)
 {
-	size_t i;
+  size_t i;
 
-	/* 1: X <-- B_{2r - 1} */
-	blkcpy(X, &Bin[8 * r - 4], 64);
+  /* 1: X <-- B_{2r - 1} */
+  blkcpy(X, &Bin[(2 * r - 1) * 16], 64);
 
-	/* 2: for i = 0 to 2r - 1 do */
-	for (i = 0; i < r; i++) {
-		/* 3: X <-- H(X \xor B_i) */
-		blkxor(X, &Bin[i * 8], 64);
-		salsa20_8(X);
+  /* 2: for i = 0 to 2r - 1 do */
+  for (i = 0; i < 2 * r; i += 2) {
+    /* 3: X <-- H(X \xor B_i) */
+    blkxor(X, &Bin[i * 16], 64);
+    salsa20_8(X);
 
-		/* 4: Y_i <-- X */
-		/* 6: B' <-- (Y_0, Y_2 ... Y_{2r-2}, Y_1, Y_3 ... Y_{2r-1}) */
-		blkcpy(&Bout[i * 4], X, 64);
+    /* 4: Y_i <-- X */
+    /* 6: B' <-- (Y_0, Y_2 ... Y_{2r-2}, Y_1, Y_3 ... Y_{2r-1}) */
+    blkcpy(&Bout[i * 8], X, 64);
 
-		/* 3: X <-- H(X \xor B_i) */
-		blkxor(X, &Bin[i * 8 + 4], 64);
-		salsa20_8(X);
+    /* 3: X <-- H(X \xor B_i) */
+    blkxor(X, &Bin[i * 16 + 16], 64);
+    salsa20_8(X);
 
-		/* 4: Y_i <-- X */
-		/* 6: B' <-- (Y_0, Y_2 ... Y_{2r-2}, Y_1, Y_3 ... Y_{2r-1}) */
-		blkcpy(&Bout[(r + i) * 4], X, 64);
-	}
+    /* 4: Y_i <-- X */
+    /* 6: B' <-- (Y_0, Y_2 ... Y_{2r-2}, Y_1, Y_3 ... Y_{2r-1}) */
+    blkcpy(&Bout[i * 8 + r * 16], X, 64);
+  }
 }
 
 /**
@@ -167,9 +154,9 @@ blockmix_salsa8(__m128i * Bin, __m128i * Bout, __m128i * X, size_t r)
 static uint64_t
 integerify(void * B, size_t r)
 {
-	uint32_t * X = (void *)((uintptr_t)(B) + (2 * r - 1) * 64);
+  uint32_t * X = (void *)((uintptr_t)(B) + (2 * r - 1) * 64);
 
-	return (((uint64_t)(X[13]) << 32) + X[0]);
+  return (((uint64_t)(X[1]) << 32) + X[0]);
 }
 
 /**
@@ -181,63 +168,54 @@ integerify(void * B, size_t r)
  * multiple of 64 bytes.
  */
 void
-smix(uint8_t * B, size_t r, uint64_t N, void * V, void * XY)
+smix(uint8_t * B, size_t r, uint64_t N, uint32_t * V, uint32_t * XY)
 {
-	__m128i * X = XY;
-	__m128i * Y = (void *)((uintptr_t)(XY) + 128 * r);
-	__m128i * Z = (void *)((uintptr_t)(XY) + 256 * r);
-	uint32_t * X32 = (void *)X;
-	uint64_t i, j;
-	size_t k;
-
-	/* 1: X <-- B */
-	for (k = 0; k < 2 * r; k++) {
-		for (i = 0; i < 16; i++) {
-			X32[k * 16 + i] =
-			    le32dec(&B[(k * 16 + (i * 5 % 16)) * 4]);
-		}
-	}
-
-	/* 2: for i = 0 to N - 1 do */
-	for (i = 0; i < N; i += 2) {
-		/* 3: V_i <-- X */
-		blkcpy((void *)((uintptr_t)(V) + i * 128 * r), X, 128 * r);
-
-		/* 4: X <-- H(X) */
-		blockmix_salsa8(X, Y, Z, r);
-
-		/* 3: V_i <-- X */
-		blkcpy((void *)((uintptr_t)(V) + (i + 1) * 128 * r),
-		    Y, 128 * r);
-
-		/* 4: X <-- H(X) */
-		blockmix_salsa8(Y, X, Z, r);
-	}
-
-	/* 6: for i = 0 to N - 1 do */
-	for (i = 0; i < N; i += 2) {
-		/* 7: j <-- Integerify(X) mod N */
-		j = integerify(X, r) & (N - 1);
-
-		/* 8: X <-- H(X \xor V_j) */
-		blkxor(X, (void *)((uintptr_t)(V) + j * 128 * r), 128 * r);
-		blockmix_salsa8(X, Y, Z, r);
-
-		/* 7: j <-- Integerify(X) mod N */
-		j = integerify(Y, r) & (N - 1);
-
-		/* 8: X <-- H(X \xor V_j) */
-		blkxor(Y, (void *)((uintptr_t)(V) + j * 128 * r), 128 * r);
-		blockmix_salsa8(Y, X, Z, r);
-	}
-
-	/* 10: B' <-- X */
-	for (k = 0; k < 2 * r; k++) {
-		for (i = 0; i < 16; i++) {
-			le32enc(&B[(k * 16 + (i * 5 % 16)) * 4],
-			    X32[k * 16 + i]);
-		}
-	}
+  uint32_t * X = XY;
+  uint32_t * Y = &XY[32 * r];
+  uint32_t * Z = &XY[64 * r];
+  uint64_t i;
+  uint64_t j;
+  size_t k;
+
+  /* 1: X <-- B */
+  for (k = 0; k < 32 * r; k++)
+    X[k] = le32dec(&B[4 * k]);
+
+  /* 2: for i = 0 to N - 1 do */
+  for (i = 0; i < N; i += 2) {
+    /* 3: V_i <-- X */
+    blkcpy(&V[i * (32 * r)], X, 128 * r);
+
+    /* 4: X <-- H(X) */
+    blockmix_salsa8(X, Y, Z, r);
+
+    /* 3: V_i <-- X */
+    blkcpy(&V[(i + 1) * (32 * r)], Y, 128 * r);
+
+    /* 4: X <-- H(X) */
+    blockmix_salsa8(Y, X, Z, r);
+  }
+
+  /* 6: for i = 0 to N - 1 do */
+  for (i = 0; i < N; i += 2) {
+    /* 7: j <-- Integerify(X) mod N */
+    j = integerify(X, r) & (N - 1);
+
+    /* 8: X <-- H(X \xor V_j) */
+    blkxor(X, &V[j * (32 * r)], 128 * r);
+    blockmix_salsa8(X, Y, Z, r);
+
+    /* 7: j <-- Integerify(X) mod N */
+    j = integerify(Y, r) & (N - 1);
+
+    /* 8: X <-- H(X \xor V_j) */
+    blkxor(Y, &V[j * (32 * r)], 128 * r);
+    blockmix_salsa8(Y, X, Z, r);
+  }
+
+  /* 10: B' <-- X */
+  for (k = 0; k < 32 * r; k++)
+    le32enc(&B[4 * k], X[k]);
 }
 
 /**
@@ -251,107 +229,108 @@ smix(uint8_t * B, size_t r, uint64_t N, void * V, void * XY)
  */
 int
 crypto_scrypt(const uint8_t * passwd, size_t passwdlen,
-    const uint8_t * salt, size_t saltlen, uint64_t N, uint32_t r, uint32_t p,
+    const uint8_t * salt, size_t saltlen, uint64_t N, uint32_t _r, uint32_t _p,
     uint8_t * buf, size_t buflen)
 {
-	void * B0, * V0, * XY0;
-	uint8_t * B;
-	uint32_t * V;
-	uint32_t * XY;
-	uint32_t i;
-
-	/* Sanity-check parameters. */
+  void * B0, * V0, * XY0;
+  uint8_t * B;
+  uint32_t * V;
+  uint32_t * XY;
+  size_t r = _r, p = _p;
+  uint32_t i;
+
+  /* Sanity-check parameters. */
 #if SIZE_MAX > UINT32_MAX
-	if (buflen > (((uint64_t)(1) << 32) - 1) * 32) {
-		errno = EFBIG;
-		goto err0;
-	}
+  if (buflen > (((uint64_t)(1) << 32) - 1) * 32) {
+    errno = EFBIG;
+    goto err0;
+  }
 #endif
-	if ((uint64_t)(r) * (uint64_t)(p) >= (1 << 30)) {
-		errno = EFBIG;
-		goto err0;
-	}
-	if (((N & (N - 1)) != 0) || (N == 0)) {
-		errno = EINVAL;
-		goto err0;
-	}
-	if ((r > SIZE_MAX / 128 / p) ||
+  if ((uint64_t)(r) * (uint64_t)(p) >= (1 << 30)) {
+    errno = EFBIG;
+    goto err0;
+  }
+  if (((N & (N - 1)) != 0) || (N < 2)) {
+    errno = EINVAL;
+    goto err0;
+  }
+  if ((r > SIZE_MAX / 128 / p) ||
 #if SIZE_MAX / 256 <= UINT32_MAX
-	    (r > (SIZE_MAX - 64) / 256) ||
+      (r > SIZE_MAX / 256) ||
 #endif
-	    (N > SIZE_MAX / 128 / r)) {
-		errno = ENOMEM;
-		goto err0;
-	}
+      (N > SIZE_MAX / 128 / r)) {
+    errno = ENOMEM;
+    goto err0;
+  }
 
-	/* Allocate memory. */
+  /* Allocate memory. */
 #ifdef HAVE_POSIX_MEMALIGN
-	if ((errno = posix_memalign(&B0, 64, 128 * r * p)) != 0)
-		goto err0;
-	B = (uint8_t *)(B0);
-	if ((errno = posix_memalign(&XY0, 64, 256 * r + 64)) != 0)
-		goto err1;
-	XY = (uint32_t *)(XY0);
+  if ((errno = posix_memalign(&B0, 64, 128 * r * p)) != 0)
+    goto err0;
+  B = (uint8_t *)(B0);
+  if ((errno = posix_memalign(&XY0, 64, 256 * r + 64)) != 0)
+    goto err1;
+  XY = (uint32_t *)(XY0);
 #ifndef MAP_ANON
-	if ((errno = posix_memalign(&V0, 64, 128 * r * N)) != 0)
-		goto err2;
-	V = (uint32_t *)(V0);
+  if ((errno = posix_memalign(&V0, 64, 128 * r * N)) != 0)
+    goto err2;
+  V = (uint32_t *)(V0);
 #endif
 #else
-	if ((B0 = malloc(128 * r * p + 63)) == NULL)
-		goto err0;
-	B = (uint8_t *)(((uintptr_t)(B0) + 63) & ~ (uintptr_t)(63));
-	if ((XY0 = malloc(256 * r + 64 + 63)) == NULL)
-		goto err1;
-	XY = (uint32_t *)(((uintptr_t)(XY0) + 63) & ~ (uintptr_t)(63));
+  if ((B0 = malloc(128 * r * p + 63)) == NULL)
+    goto err0;
+  B = (uint8_t *)(((uintptr_t)(B0) + 63) & ~ (uintptr_t)(63));
+  if ((XY0 = malloc(256 * r + 64 + 63)) == NULL)
+    goto err1;
+  XY = (uint32_t *)(((uintptr_t)(XY0) + 63) & ~ (uintptr_t)(63));
 #ifndef MAP_ANON
-	if ((V0 = malloc(128 * r * N + 63)) == NULL)
-		goto err2;
-	V = (uint32_t *)(((uintptr_t)(V0) + 63) & ~ (uintptr_t)(63));
+  if ((V0 = malloc(128 * r * N + 63)) == NULL)
+    goto err2;
+  V = (uint32_t *)(((uintptr_t)(V0) + 63) & ~ (uintptr_t)(63));
 #endif
 #endif
 #ifdef MAP_ANON
-	if ((V0 = mmap(NULL, 128 * r * N, PROT_READ | PROT_WRITE,
+  if ((V0 = mmap(NULL, 128 * r * N, PROT_READ | PROT_WRITE,
 #ifdef MAP_NOCORE
-	    MAP_ANON | MAP_PRIVATE | MAP_NOCORE,
+      MAP_ANON | MAP_PRIVATE | MAP_NOCORE,
 #else
-	    MAP_ANON | MAP_PRIVATE,
+      MAP_ANON | MAP_PRIVATE,
 #endif
-	    -1, 0)) == MAP_FAILED)
-		goto err2;
-	V = (uint32_t *)(V0);
+      -1, 0)) == MAP_FAILED)
+    goto err2;
+  V = (uint32_t *)(V0);
 #endif
 
-	/* 1: (B_0 ... B_{p-1}) <-- PBKDF2(P, S, 1, p * MFLen) */
-	PBKDF2_SHA256(passwd, passwdlen, salt, saltlen, 1, B, p * 128 * r);
+  /* 1: (B_0 ... B_{p-1}) <-- PBKDF2(P, S, 1, p * MFLen) */
+  PBKDF2_SHA256(passwd, passwdlen, salt, saltlen, 1, B, p * 128 * r);
 
-	/* 2: for i = 0 to p - 1 do */
-	for (i = 0; i < p; i++) {
-		/* 3: B_i <-- MF(B_i, N) */
-		smix(&B[i * 128 * r], r, N, V, XY);
-	}
+  /* 2: for i = 0 to p - 1 do */
+  for (i = 0; i < p; i++) {
+    /* 3: B_i <-- MF(B_i, N) */
+    smix(&B[i * 128 * r], r, N, V, XY);
+  }
 
-	/* 5: DK <-- PBKDF2(P, B, 1, dkLen) */
-	PBKDF2_SHA256(passwd, passwdlen, B, p * 128 * r, 1, buf, buflen);
+  /* 5: DK <-- PBKDF2(P, B, 1, dkLen) */
+  PBKDF2_SHA256(passwd, passwdlen, B, p * 128 * r, 1, buf, buflen);
 
-	/* Free memory. */
+  /* Free memory. */
 #ifdef MAP_ANON
-	if (munmap(V0, 128 * r * N))
-		goto err2;
+  if (munmap(V0, 128 * r * N))
+    goto err2;
 #else
-	free(V0);
+  free(V0);
 #endif
-	free(XY0);
-	free(B0);
+  free(XY0);
+  free(B0);
 
-	/* Success! */
-	return (0);
+  /* Success! */
+  return (0);
 
 err2:
-	free(XY0);
+  free(XY0);
 err1:
-	free(B0);
+  free(B0);
 err0:
-	/* Failure! */
-	return (-1);
+  /* Failure! */
+  return (-1);
 }
diff --git a/outside/scrypt/crypto_scrypt.h b/outside/scrypt/crypto_scrypt.h
index b88be09..39cad5c 100644
--- a/outside/scrypt/crypto_scrypt.h
+++ b/outside/scrypt/crypto_scrypt.h
@@ -30,9 +30,8 @@
 #define _CRYPTO_SCRYPT_H_
 
 #include <stdint.h>
-#include <emmintrin.h>
 
-void smix(uint8_t *, size_t, uint64_t, void *, void *);
+void smix(uint8_t *, size_t, uint64_t, uint32_t *, uint32_t *);
 void PBKDF2_SHA256(const uint8_t *, size_t, const uint8_t *, size_t,
     uint64_t, uint8_t *, size_t);
 
-- 
1.9.1

